// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: mfa_query.sql

package dbsqlctest

import (
	"context"

	typeid "go.jetify.com/typeid/v2"
)

const createUserMFA = `-- name: CreateUserMFA :one
INSERT INTO shield_user_mfas
  (id, user_id, name)
VALUES
  ($1, $2, $3)
RETURNING id, created_at, updated_at, name, user_id
`

type CreateUserMFAParams struct {
	ID     typeid.TypeID
	UserID typeid.TypeID
	Name   string
}

func (q *Queries) CreateUserMFA(ctx context.Context, db DBTX, arg CreateUserMFAParams) (ShieldUserMfa, error) {
	row := db.QueryRow(ctx, createUserMFA, arg.ID, arg.UserID, arg.Name)
	var i ShieldUserMfa
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}

const getUserMFAsByUserID = `-- name: GetUserMFAsByUserID :many
SELECT id, created_at, updated_at, name, user_id FROM shield_user_mfas WHERE user_id = $1
`

func (q *Queries) GetUserMFAsByUserID(ctx context.Context, db DBTX, userID typeid.TypeID) ([]ShieldUserMfa, error) {
	rows, err := db.Query(ctx, getUserMFAsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShieldUserMfa
	for rows.Next() {
		var i ShieldUserMfa
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
