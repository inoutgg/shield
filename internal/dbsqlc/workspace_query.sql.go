// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workspace_query.sql

package dbsqlc

import (
	"context"
	"time"

	typeid "go.jetify.com/typeid/v2"
)

const acceptWorkspaceInvitation = `-- name: AcceptWorkspaceInvitation :exec
UPDATE shield_workspace_membership_invitations
SET status = 'accepted', accepted_at = NOW(), expires_at = NOW()
WHERE id = $1
`

func (q *Queries) AcceptWorkspaceInvitation(ctx context.Context, db DBTX, invitationID typeid.TypeID) error {
	_, err := db.Exec(ctx, acceptWorkspaceInvitation, invitationID)
	return err
}

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO shield_workspaces (id, owned_by, name)
VALUES ($1, $2, $3)
RETURNING id, owned_by, created_at, updated_at, name
`

type CreateWorkspaceParams struct {
	WorkspaceID typeid.TypeID
	OwnedBy     typeid.TypeID
	Name        string
}

func (q *Queries) CreateWorkspace(ctx context.Context, db DBTX, arg CreateWorkspaceParams) (ShieldWorkspace, error) {
	row := db.QueryRow(ctx, createWorkspace, arg.WorkspaceID, arg.OwnedBy, arg.Name)
	var i ShieldWorkspace
	err := row.Scan(
		&i.ID,
		&i.OwnedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const findWorkspaceByID = `-- name: FindWorkspaceByID :one
SELECT id, owned_by, created_at, updated_at, name
FROM shield_workspaces
WHERE id = $1
`

func (q *Queries) FindWorkspaceByID(ctx context.Context, db DBTX, id typeid.TypeID) (ShieldWorkspace, error) {
	row := db.QueryRow(ctx, findWorkspaceByID, id)
	var i ShieldWorkspace
	err := row.Scan(
		&i.ID,
		&i.OwnedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const inviteUserToWorkspaceByEmail = `-- name: InviteUserToWorkspaceByEmail :exec
INSERT INTO shield_workspace_membership_invitations (id, workspace_id, member_email, expires_at)
VALUES ($1, $2, $3, $4)
`

type InviteUserToWorkspaceByEmailParams struct {
	InvitationID typeid.TypeID
	WorkspaceID  typeid.TypeID
	MemberEmail  string
	ExpiresAt    time.Time
}

func (q *Queries) InviteUserToWorkspaceByEmail(ctx context.Context, db DBTX, arg InviteUserToWorkspaceByEmailParams) error {
	_, err := db.Exec(ctx, inviteUserToWorkspaceByEmail,
		arg.InvitationID,
		arg.WorkspaceID,
		arg.MemberEmail,
		arg.ExpiresAt,
	)
	return err
}

const rejectWorkspaceInvitation = `-- name: RejectWorkspaceInvitation :exec
UPDATE shield_workspace_membership_invitations
SET status = 'rejected', rejected_at = NOW(), expires_at = NOW()
WHERE id = $1
`

func (q *Queries) RejectWorkspaceInvitation(ctx context.Context, db DBTX, invitationID typeid.TypeID) error {
	_, err := db.Exec(ctx, rejectWorkspaceInvitation, invitationID)
	return err
}

const transferWorkspaceOwnership = `-- name: TransferWorkspaceOwnership :exec
UPDATE shield_workspaces
SET owned_by = $1
WHERE id = $2
`

type TransferWorkspaceOwnershipParams struct {
	NewOwnerID  typeid.TypeID
	WorkspaceID typeid.TypeID
}

func (q *Queries) TransferWorkspaceOwnership(ctx context.Context, db DBTX, arg TransferWorkspaceOwnershipParams) error {
	_, err := db.Exec(ctx, transferWorkspaceOwnership, arg.NewOwnerID, arg.WorkspaceID)
	return err
}
