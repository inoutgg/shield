// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session_query.sql

package dbsqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO shield_user_sessions (id, user_id, expires_at)
VALUES ($1::UUID, $2::UUID, $3)
RETURNING id
`

type CreateUserSessionParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateUserSession(ctx context.Context, db DBTX, arg CreateUserSessionParams) (uuid.UUID, error) {
	row := db.QueryRow(ctx, createUserSession, arg.ID, arg.UserID, arg.ExpiresAt)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const expireAllSessionsByUserID = `-- name: ExpireAllSessionsByUserID :many
UPDATE shield_user_sessions
SET expires_at = NOW()
WHERE user_id = $1::UUID
RETURNING id
`

func (q *Queries) ExpireAllSessionsByUserID(ctx context.Context, db DBTX, userID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := db.Query(ctx, expireAllSessionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const expireSessionByID = `-- name: ExpireSessionByID :one
UPDATE shield_user_sessions
SET expires_at = NOW()
WHERE id = $1::UUID
RETURNING id
`

func (q *Queries) ExpireSessionByID(ctx context.Context, db DBTX, id uuid.UUID) (uuid.UUID, error) {
	row := db.QueryRow(ctx, expireSessionByID, id)
	err := row.Scan(&id)
	return id, err
}

const findUserSessionByID = `-- name: FindUserSessionByID :one
SELECT id, created_at, updated_at, expires_at, user_id, evicted_by
FROM shield_user_sessions
WHERE id = $1::UUID AND expires_at > NOW()
LIMIT 1
`

func (q *Queries) FindUserSessionByID(ctx context.Context, db DBTX, id uuid.UUID) (ShieldUserSession, error) {
	row := db.QueryRow(ctx, findUserSessionByID, id)
	var i ShieldUserSession
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.UserID,
		&i.EvictedBy,
	)
	return i, err
}
